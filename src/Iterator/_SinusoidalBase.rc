#define _Wave _C(CDSP2_Wave, _, _T1)
#define _List_Int CSVP_List_Int
#define _STFTIterlyzer _C(CSVP_STFTIterlyzer, _, _T1)

#define _CheckMembers(Name) \
    CDSP2_If_Debug_Check \
    ( \
        if(This -> Wave == NULL) \
            RDebugPrint(_RTClassName, _S(Name) ": require wave."); \
        if(This -> RefF0 <= 0) \
            RDebugPrint(_RTClassName, _S(Name) ": require referential " \
                "frequency."); \
    )

RCtor(_RTClassName)
{
    RCall(_RTClassName, CtorSize)(This, ANALSIZE);
}

RDtor(_RTClassName)
{
    RCall(_List_Int, Dtor)(& This -> PulseList);
    Array_Dtor(_T1, This -> FreqList);
    
    RCall(_STFTIterlyzer, Dtor)(This -> Sublyzer0);
    RCall(_STFTIterlyzer, Dtor)(This -> Sublyzer1);
    
    RFree(This -> Sublyzer0);
    RFree(This -> Sublyzer1);
}

RTMethod(void, CSVP_SinusoidalBase, CtorSize, int Size)
{
    This -> Sublyzer0 = RAlloc_Class(_STFTIterlyzer, 1);
    This -> Sublyzer1 = RAlloc_Class(_STFTIterlyzer, 1);
    
    RCall(_List_Int, Ctor)(& This -> PulseList);
    Array_Ctor(_T1, This -> FreqList);
    
    RCall(_STFTIterlyzer, CtorSize)(This -> Sublyzer0, Size);
    RCall(_STFTIterlyzer, CtorSize)(This -> Sublyzer1, Size);
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer0, ANALHOP);
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer1, ANALHOP);
    This -> Size = Size;
    
    This -> Wave = NULL;
    This -> LastPosition = 0;
    This -> InitPosition = 0;
    This -> RefF0 = -1;
    This -> InitF0 = -1;
    RInit(_RTClassName);    
}

RTMethod(void, CSVP_SinusoidalBase, Resize, int Size)
{
    if(Size != This -> Size)
    {
        This -> Size = Size;
        RCall(_STFTIterlyzer, Resize)(This -> Sublyzer0, Size);
        RCall(_STFTIterlyzer, Resize)(This -> Sublyzer1, Size);
    }
}

RTMethod(void, CSVP_SinusoidalBase, From, _RTClassName* Sorc)
{
    RCall(_List_Int, From)(& This -> PulseList, & Sorc -> PulseList);
    RCall(_STFTIterlyzer, From)(This -> Sublyzer0, Sorc -> Sublyzer0);
    RCall(_STFTIterlyzer, From)(This -> Sublyzer1, Sorc -> Sublyzer1);
    
    This -> Wave = Sorc -> Wave;
    This -> LastPosition = Sorc -> LastPosition;
    This -> InitPosition = Sorc -> InitPosition;
    This -> RefF0 = Sorc -> RefF0;
    This -> InitF0 = Sorc -> InitF0;
}

RTMethod(void, CSVP_SinusoidalBase, Clear)
{
    RCall(_List_Int, Clear)(& This -> PulseList);
    This -> FreqList_Index = -1;
    
    RCall(_STFTIterlyzer, Clear)(This -> Sublyzer0);
    RCall(_STFTIterlyzer, Clear)(This -> Sublyzer1);
}

RTMethod(void, CSVP_SinusoidalBase, SetWave, void* Sorc)
{
    This -> Wave = Sorc;
    RCall(_STFTIterlyzer, SetWave)(This -> Sublyzer0, Sorc);
    RCall(_STFTIterlyzer, SetWave)(This -> Sublyzer1, Sorc);
}

RTMethod(void, CSVP_SinusoidalBase, SetHopSize, int HopSize)
{
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer0, HopSize);
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer1, HopSize);
}

RTMethod(void, CSVP_SinusoidalBase, SetPosition, int Position)
{
    CDSP2_If_Debug_Check
    (
        if(This -> Wave == NULL)
            RDebugPrint(_RTClassName, "SetPosition: inproper call sequence"
                "(Wave not set yet).");
    )
    
    This -> LastPosition = Position;
    This -> InitPosition = Position;
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer0, Position + 0);
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer1, Position + 1);
}

RTMethod(int , CSVP_SinusoidalBase, GetPosition)
{
    return This -> LastPosition;
}

RTMethod(void, CSVP_SinusoidalBase, SetRefFreq, _T1 RefF0)
{
    This -> RefF0 = RefF0;
    if(This -> LastPosition == This -> InitPosition)
        This -> InitF0 = RefF0;
}

RTMethod(int , CSVP_SinusoidalBase, PreAnalysisTo, int Position)
{
    CDSP2_If_Debug_Check
    (
        if(This -> Wave == NULL)
            RDebugPrint(_RTClassName, "PreAnalysisTo: inproper call sequence"
                "(Wave not set yet).");
    )
    
    _T1 Candidate = RCall(CSVP_SecureF0FromWave, _T1)(This -> Wave,
        This -> InitPosition, This -> InitPosition, Position, 50, 1500);
    if(Candidate < 0)
        return - 1;
    This -> InitF0 = Candidate;
    This -> RefF0  = Candidate;
}

RTMethod(int , CSVP_SinusoidalBase, IterNextTo, int Position)
{
    _CheckMembers(IterNextTo);
    
    RCall(_STFTIterlyzer, IterNextTo)(This -> Sublyzer0, Position + 0);
    RCall(_STFTIterlyzer, IterNextTo)(This -> Sublyzer1, Position + 1);
    RCall(_List_Int, From)(& This -> PulseList,
        & This -> Sublyzer0 -> PulseList);
    Array_Resize(_T1, This -> FreqList, This -> PulseList.Frames_Index + 1);
    This -> FreqList_Index = This -> PulseList.Frames_Index;
    This -> LastPosition = RCall(_STFTIterlyzer, GetPosition)
        (This -> Sublyzer0);
    
    int i;
    for(i = 0; i <= This -> PulseList.Frames_Index; i ++)
    {
        _T1 Candidate = RCall(CSVP_F0FromSuccSpectrum, _T1)(
            & This -> Sublyzer0 -> SpecList.Frames[i],
            & This -> Sublyzer1 -> SpecList.Frames[i], 1,
            This -> RefF0 * 0.7, This -> RefF0 * 1.4);
        if(! (Candidate > 50 && Candidate < 1500))
            return -1;
        This -> RefF0 = Candidate;
        This -> FreqList[i] = Candidate;
        //printf("%d %f\n", This -> PulseList.Frames[i], Candidate);
    }
}

RTMethod(int , CSVP_SinusoidalBase, PrevTo, int Position)
{
    _CheckMembers(PrevTo);
    CDSP2_If_Debug_Check
    (
        if(Position > This -> InitPosition)
            RDebugPrint(_RTClassName, "PrevTo: destination position later than "
                "initial position.");
    )
    
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer0,
        This -> InitPosition + 0);
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer1,
        This -> InitPosition + 1);
    
    RCall(_STFTIterlyzer, IterPrevTo)(This -> Sublyzer0, Position + 0);
    RCall(_STFTIterlyzer, IterPrevTo)(This -> Sublyzer1, Position + 1);
    RCall(_List_Int, From)(& This -> PulseList,
        & This -> Sublyzer0 -> PulseList);
    Array_Resize(_T1, This -> FreqList, This -> PulseList.Frames_Index + 1);
    This -> FreqList_Index = This -> PulseList.Frames_Index;
    
    int i;
    for(i = This -> PulseList.Frames_Index; i >= 0; i --)
    {
        _T1 Candidate = RCall(CSVP_F0FromSuccSpectrum, _T1)(
            & This -> Sublyzer0 -> SpecList.Frames[i],
            & This -> Sublyzer1 -> SpecList.Frames[i], 1,
            This -> RefF0 * 0.7, This -> RefF0 * 1.4);
        if(! (Candidate > 50 && Candidate < 1500))
            return -1;
        This -> RefF0 = Candidate;
        This -> FreqList[i] = Candidate;
        //printf("%d %f\n", This -> PulseList.Frames[i], Candidate);
    }
    
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer0,
        This -> LastPosition + 0);
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer1,
        This -> LastPosition + 1);
}

#undef  _Wave
#undef  _List_Int
#undef  _STFTIterlyzer

