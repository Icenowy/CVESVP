#define _Wave _C(CDSP2_Wave, _, _T1)
#define _List_Int CSVP_List_Int
#define _STFTIterlyzer _C(CSVP_STFTIterlyzer, _, _T1)

RCtor(_RTClassName)
{
    RCall(_RTClassName, CtorSize)(This, ANALSIZE);
}

RDtor(_RTClassName)
{
    RCall(_List_Int, Dtor)(& This -> PulseList);
    RCall(_STFTIterlyzer, Dtor)(This -> Sublyzer0);
    RCall(_STFTIterlyzer, Dtor)(This -> Sublyzer1);
    
    RFree(This -> Sublyzer0);
    RFree(This -> Sublyzer1);
}

RTMethod(void, CSVP_SinusoidalBase, CtorSize, int Size)
{
    This -> Sublyzer0 = RAlloc_Class(_STFTIterlyzer, 1);
    This -> Sublyzer1 = RAlloc_Class(_STFTIterlyzer, 1);
    
    RCall(_List_Int, Ctor)(& This -> PulseList);
    RCall(_STFTIterlyzer, CtorSize)(This -> Sublyzer0, Size);
    RCall(_STFTIterlyzer, CtorSize)(This -> Sublyzer1, Size);
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer0, ANALHOP);
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer1, ANALHOP);
    This -> Size = Size;
    
    This -> Wave = NULL;
    This -> LastPosition = 0;
    This -> InitPosition = 0;
    This -> RefF0 = 0;
    This -> InitF0 = 0;
    RInit(_RTClassName);    
}

RTMethod(void, CSVP_SinusoidalBase, Resize, int Size)
{
    if(Size != This -> Size)
    {
        This -> Size = Size;
        RCall(_STFTIterlyzer, Resize)(This -> Sublyzer0, Size);
        RCall(_STFTIterlyzer, Resize)(This -> Sublyzer1, Size);
    }
}

RTMethod(void, CSVP_SinusoidalBase, From, _RTClassName* Sorc)
{
    RCall(_List_Int, From)(& This -> PulseList, & Sorc -> PulseList);
    RCall(_STFTIterlyzer, From)(This -> Sublyzer0, Sorc -> Sublyzer0);
    RCall(_STFTIterlyzer, From)(This -> Sublyzer1, Sorc -> Sublyzer1);
    
    This -> Wave = Sorc -> Wave;
    This -> LastPosition = Sorc -> LastPosition;
    This -> InitPosition = Sorc -> InitPosition;
    This -> RefF0 = Sorc -> RefF0;
    This -> InitF0 = Sorc -> InitF0;
}

RTMethod(void, CSVP_SinusoidalBase, SetWave, void* Sorc)
{
    This -> Wave = Sorc;
    RCall(_STFTIterlyzer, SetWave)(This -> Sublyzer0, Sorc);
    RCall(_STFTIterlyzer, SetWave)(This -> Sublyzer1, Sorc);
}

RTMethod(void, CSVP_SinusoidalBase, SetHopSize, int HopSize)
{
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer0, HopSize);
    RCall(_STFTIterlyzer, SetHopSize)(This -> Sublyzer1, HopSize);
}

RTMethod(void, CSVP_SinusoidalBase, SetPosition, int Position)
{
    This -> LastPosition = Position;
    This -> InitPosition = Position;
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer0, Position + 0);
    RCall(_STFTIterlyzer, SetPosition)(This -> Sublyzer1, Position + 1);
}

RTMethod(int , CSVP_SinusoidalBase, GetPosition)
{
    return This -> LastPosition;
}

RTMethod(void, CSVP_SinusoidalBase, SetRefFreq, _T1 RefF0)
{
    This -> RefF0 = RefF0;
    if(This -> LastPosition == This -> InitPosition)
        This -> InitF0 = RefF0;
}

RTMethod(int , CSVP_SinusoidalBase, PreAnalysisTo, int Position)
{
    _T1 Candidate = RCall(CSVP_SecureF0FromWave, _T1)(This -> Wave,
        This -> InitPosition, This -> InitPosition, Position, 50, 1500);
    if(Candidate < 0)
        return - 1;
    This -> InitF0 = Candidate;
    This -> RefF0  = Candidate;
}

#undef  _Wave
#undef  _List_Int
#undef  _STFTIterlyzer

