#define _DataFrame _C(CDSP2_DataFrame, _, _T1)

RTFunc(static _T1, _CSVP_PhaseInterpU, _T1 Sorc1, _T1 Sorc2, _T1 Ratio)
{
    if(fabs(Sorc1 - Sorc2) < M_PI)
    {
        return Sorc1 + (Sorc2 - Sorc1) * Ratio;
    }else
    {
        if(Sorc1 < Sorc2)
            Sorc1 += 2.0 * M_PI;
        else
            Sorc2 += 2.0 * M_PI;
        return fmod(Sorc1 + (Sorc2 - Sorc1) * Ratio, 2.0 * M_PI);
    }
}

RTFunc(void, CSVP_PhaseInterp, _DataFrame* Dest, _DataFrame* Sorc1,
    _DataFrame* Sorc2, _T1 Ratio)
{
    int i, MaxSize, MinSize;
    if(Sorc2 -> Size > Sorc1 -> Size)
    {
        MaxSize = Sorc2 -> Size;
        MinSize = Sorc1 -> Size;
    }else
    {
        MaxSize = Sorc1 -> Size;
        MinSize = Sorc2 -> Size;
    }
    RCall(_DataFrame, From)(Dest, Sorc1);
    RCall(_DataFrame, Resize)(Dest, MaxSize);
    
    for(i = 0; i < MinSize; i ++)
    {
        Dest -> Data[i] = RCall(_CSVP_PhaseInterpU, _T1)
            (Sorc1 -> Data[i], Sorc2 -> Data[i], Ratio);
    }
    for(i = MinSize; i < Sorc1 -> Size; i ++)
        Dest -> Data[i] = Sorc1 -> Data[i];
    for(i = MinSize; i < Sorc2 -> Size; i ++)
        Dest -> Data[i] = Sorc2 -> Data[i];
}

RTFunc(void, CSVP_PhaseSync, _DataFrame* Dest, _T1* Freq, _T1 Phse0)
{
    _T1 POrig = Dest -> Data[0];
    if(fabs(POrig - Phse0) > M_PI)
        if(POrig < Phse0) POrig += 2.0 * M_PI;
        else Phse0 += 2.0 * M_PI;
    _T1 t = (Phse0 - POrig) / Freq[0];
    
    int i;
    for(i = 0; i < Dest -> Size; i ++)
        Dest -> Data[i] = fmod(Dest -> Data[i] + t * Freq[i] + 2.0 * M_PI,
            2.0 * M_PI);
}

#undef  _DataFrame

