#define MyType _C(_ClassName, _T3, _, _T1)
#define MyName _C1(_ClassName, _T3)

RCtor(MyType)
{
    Array_Ctor(_T2, This -> Frames);
    This -> FrameSize = 0;
    This -> FrameNum = 0;
    RInit(MyType);
}

RDtor(MyType)
{
    Array_ObjDtor(_T2, This -> Frames);
    Array_Dtor(_T2, This -> Frames);
}

RTMethod(void, MyName, CtorSize, int FrameNum, int FrameSize)
{
    Array_Ctor(_T2, This -> Frames);
    This -> FrameSize = 0;
    This -> FrameNum = 0;
    RCall(MyType, Resize)(This, FrameNum, FrameSize);
    RInit(MyType);
}

RTMethod(void, MyName, Resize, int FrameNum, int FrameSize)
{
    int i;
    if(FrameSize != This -> FrameSize)
    {
        Array_ObjDtor(_T2, This -> Frames);
        Array_Resize(_T2, This -> Frames, FrameNum);
        for(i = 0; i < FrameNum; i ++)
            RCall(_T2, CtorSize)(This -> Frames + i, FrameSize);
        This -> FrameSize = FrameSize;
        This -> FrameNum = 0;
        This -> Frames_Index = - 1;
        return;
    }
    if(FrameNum > This -> Frames_Index + 1)
    {
        Array_Resize(_T2, This -> Frames, FrameNum);
        for(i = This -> Frames_Index + 1; i < FrameNum; i ++)
            RCall(_T2, CtorSize)(This -> Frames + i, FrameSize);
    }else
    {
        for(i = This -> Frames_Index; i >= FrameNum; i --)
            RCall(_T2, Dtor)(This -> Frames + i);
        Array_Resize(_T2, This -> Frames, FrameNum);
        This -> FrameNum = FrameNum < This -> FrameNum ?
            FrameNum : This -> FrameNum;
    }
    This -> Frames_Index = FrameNum - 1;
}

RTMethod(void, MyName, From, MyType* Sorc)
{
    int i;
    RCall(MyType, Resize)(This, Sorc -> FrameNum, Sorc -> FrameSize);
    for(i = 0; i < Sorc -> FrameNum; i ++)
        RCall(_T2, From)(This -> Frames + i, Sorc -> Frames + i);
    This -> FrameNum = Sorc -> FrameNum;
    This -> FrameSize = Sorc -> FrameSize;
}

RTMethod(void, MyName, Clear)
{
    RCall(MyType, Resize)(This, 0, This -> FrameSize);
}

RTMethod(void, MyName, Fetch, _T2* Dest, int Index)
{
    RCall(_T2, From)(Dest, This -> Frames + Index);
}

RTMethod(void, MyName, Extract, _T2* Dest, int Index)
{
    RCall(_T2, From)(Dest, This -> Frames + Index);
    RCall(MyType, Remove)(This, Index);
}

RTMethod(void, MyName, Remove, int Index)
{
    RCall(_T2, Dtor)(This -> Frames + Index);
    Array_Remove(_T2, This -> Frames, Index);
}

RTMethod(void, MyName, RemoveRange, int LIndex, int HIndex)
{
    int i;
    for(i = LIndex; i <= HIndex; i ++)
        RCall(_T2, Dtor)(This -> Frames + i);
    Array_RemoveRange(_T2, This -> Frames, LIndex, HIndex);
}

RTMethod(void, MyName, Add, _T2* Sorc, int Index)
{
    Array_InsertNull(_T2, This -> Frames, Index);
    RCall(_T2, CtorSize)(This -> Frames + Index, This -> FrameSize);
    RCall(_T2, From)(This -> Frames + Index, Sorc);
}

#undef  MyType
#undef  MyName

